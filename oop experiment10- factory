public class TestFactoryPattern {
    public static void main(String[] args) {
        Car hatchback = CarFactory.createCar("hatchback");
        hatchback.buildCar();

        Car sedan = CarFactory.createCar("sedan");
        sedan.buildCar();

        Car suv = CarFactory.createCar("suv");
        suv.buildCar();
    }
}

abstract class Car {
    public abstract void allocateAccessories();
    public abstract void performFinalMakeup();

    public void buildCar() {
        System.out.println("Building " + this.getClass().getSimpleName() + "...");
        allocateAccessories();
        performFinalMakeup();
        System.out.println(this.getClass().getSimpleName() + " is ready!");
    }
}

// Hatchback subclass
class Hatchback extends Car {
    @Override
    public void allocateAccessories() {
        System.out.println("Allocating basic accessories for Hatchback.");
    }

    @Override
    public void performFinalMakeup() {
        System.out.println("Performing final makeup for Hatchback.");
    }
}

// Sedan subclass
class Sedan extends Car {
    @Override
    public void allocateAccessories() {
        System.out.println("Allocating premium accessories for Sedan.");
    }

    @Override
    public void performFinalMakeup() {
        System.out.println("Performing final makeup for Sedan.");
    }
}

// SUV subclass
class SUV extends Car {
    @Override
    public void allocateAccessories() {
        System.out.println("Allocating luxury accessories for SUV.");
    }

    @Override
    public void performFinalMakeup() {
        System.out.println("Performing final makeup for SUV.");
    }
}

// Factory class
class CarFactory {
    public static Car createCar(String carType) {
        switch (carType.toLowerCase()) {
            case "hatchback":
                return new Hatchback();
            case "sedan":
                return new Sedan();
            case "suv":
                return new SUV();
            default:
                throw new IllegalArgumentException("Unknown car type: " + carType);
        }
    }
}

// Test Factory Pattern

